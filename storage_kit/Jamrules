
# enable warnings
CCFLAGS += -Wall -Wno-multichar -Wno-ctor-dtor-privacy  ;
C++FLAGS += -Wall -Wno-multichar -Wno-ctor-dtor-privacy  ;

rule LinkSharedOSLibs 
{ 
        # LinkSharedOSLibs <name> : <libs> ; 
        
        for i in $(2) 
        { 
				LINKFLAGS on $(1) += $(i) ;
#                LINKLIBS on $(1) += $(i) ; 
        } 
}

rule AddDebugInfo {
#	C++FLAGS on $(1) += "-g -O0" ;
	C++FLAGS += "-g -O0" ;
}

rule TestDefines
{
	# TestDefines <objectfile> : <type> ;
	# <type> may be R5 or POSIX

	local r5value = 0 ;
	local posixvalue = 0 ;
	switch $(2)
	{
		case R5 : r5value = 1 ;
		case POSIX : posixvalue = 1 ;
	}
	C++FLAGS on $(1) += -DSK_TEST_R5=$(r5value) ;
	C++FLAGS on $(1) += -DSK_TEST_OBOS_POSIX=$(posixvalue) ;
}

rule R5Objects
{
	for i in $(1)
	{
		local object = <$(SOURCE_GRIST)>$(i:S=.R5$(SUFOBJ)) ;
		Object $(object) : $(i) ;
		TestDefines $(object) : R5 ;
	}
}

rule LibraryFromR5Sources
{
	R5Objects $(2) ;
	LibraryFromObjects $(1) : $(>:S=.R5$(SUFOBJ)) ;
}

rule POSIXObjects
{
	for i in $(1)
	{
		local object = <$(SOURCE_GRIST)>$(i:S=.POSIX$(SUFOBJ)) ;
		Object $(object) : $(i) ;
		TestDefines $(object) : POSIX ;
	}
}

rule LibraryFromPOSIXSources
{
	POSIXObjects $(2) ;
	LibraryFromObjects $(1) : $(>:S=.POSIX$(SUFOBJ)) ;
}

rule LinkShared
{
	DEPENDS lib : $(1) ;
	DEPENDS $(1) : $(2) ;
}

actions LinkShared
{
	g++ -nostart -Xlinker -soname=$(1) $(LINKFLAGS) $(LINKLIBS) -o $(1) $(2) ;
}

rule SharedFromSources
{
	# SharedFromSources <sharedlib> : <sources> ;
	# Builds shared library <sharedlib> from sources <sources>.
	
	Objects $(2) ;
	local objects = <$(SOURCE_GRIST)>$(2:S=$(SUFOBJ)) ;
	LinkShared $(1) : $(objects) ;
}

rule LinkSharedLibs
{
	# LinkSharedLibs <target> : <libs>
	# Adds <libs> to the libraries <target> will be linked with and
	# makes <target> depend on <libs>.
	LinkSharedOSLibs $(1) : $(2) ;
	DEPENDS $(1) : $(2) ;
}
