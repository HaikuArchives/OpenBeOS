BFS - ToDo, April 24th, 2002
-----

BlockAllocator

 - the BlockAllocator is only slightly optimized and probably slow
 - the first free and the largest range are currently not correctly maintained (only efficiency suffers - it does work correctly)
 - the allocation policies will have to stand against some real world tests
 - the access to the block bitmap is currently managed using a global lock
 - the updated disk's super block is not written back yet (used block counter)


DataStream

 - growing/shrinking the stream size is not implemented for the double indirect range
 - only files are trimmed back (in bfs_close()), but every inode has a preallocated stream...


Queries

 - There shouldn't be any cases where you can speed up a query with reordering the query expression - test it
 - Check permissions of the parent directories
 - Live-Queries aren't implemented yet
 - Special handling of the last_modified index needed
 - Add protection against crashing applications which had a query open - at least the original BeOS kernel does not free the cookie (which throws some memory away *and* prevents unmounting the disk)


Journal

 - The transaction class currently does nothing else than writing the blocks directly to disk.


BPlusTree

 - BPlusTree::Remove() could trigger CachedNode::Free() to go through the free nodes list and free all pages at the end of the data stream
 - duplicate_array::Insert() should do a binary search to speed up finding the value if there are more than a certain number (e.g. 8) of entries
 - updating the TreeIterators doesn't work yet for duplicates (which may be a problem if a duplicate node will go away after a remove)
 - BPlusTree::RemoveDuplicate() could spread the contents of duplicate node with only a few entries to save some space (right now, only empty nodes are freed)


Inode


Indices

 - Support for Live-Queries is missing


Attributes

 - bfs_write_attr() doesn't check if the attribute data may fit into the small_data region if there already is that attribute as an attribute file


Volume

 - can't write super block yet (i.e. in bfs_write_fs_stat())
 - needs a lock to protect the super block


kernel_interface

 - missing functions, maybe they are not all needed (but most of them are): bfs_rename_attr(), bfs_rename_index(), bfs_initialize(), bfs_sync(), bfs_setflags(), bfs_fsync(), bfs_link()
 - bfs_rename() currently doesn't respect any permissions


general stuff

 - if any transaction that changes an inode fails, the changed inode is still in memory and had to be reloaded or the changes be undone...
 - much more stuff for full write capabilities ...
 - There is still much locking missing
 - There are also some comments with a leading "ToDo:" directly in the code which may not be mentioned here.


-----
Axel DÃ¶rfler
axeld@pinc-software.de
