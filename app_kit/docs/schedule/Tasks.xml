<?xml encoding="UTF-8" version="1.0"?>
<TaskXML>
	<group name="Application Kit">
		<section name="Messaging">
			<class name="BInvoker" owner="">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BInvoker();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BInvoker(BMessage* message, const BHandler* handler, const BLooper* looper = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BInvoker(BMessage* message, BMessenger target);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BInvoker();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t SetMessage(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessage* Message() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					uint32 Command() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t SetTarget(const BHandler* h, const BLooper* loop = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t SetTarget(BMessenger messenger);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsTargetLocal() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BHandler* Target(BLooper** looper = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessenger Messenger() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t SetHandlerForReply(BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BHandler* HandlerForReply() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					status_t InvokeNotify(BMessage* msg, uint32 kind = B_CONTROL_INVOKED);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					status_t SetTimeout(bigtime_t timeout);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bigtime_t Timeout() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					uint32 InvokeKind(bool* notify = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void BeginInvokeNotify(uint32 kind = B_CONTROL_INVOKED);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void EndInvokeNotify();
				</task>
			</class>
			<class name="BMessage" owner="William Bull">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage(uint32 what);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage(const BMessage& a_message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMessage();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage& operator=(const BMessage& msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetInfo(type_code typeRequested, int32 which, char** name, type_code* typeReturned, int32* count = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetInfo(const char* name, type_code* type, int32* c = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetInfo(const char* name, type_code* type, bool* fixed_size) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountNames(type_code type) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEmpty() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsSystem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsReply() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void PrintToStream() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Rename(const char* old_entry, const char* new_entry);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool WasDelivered() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsSourceWaiting() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsSourceRemote() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessenger ReturnAddress() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const BMessage* Previous() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool WasDropped() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint DropPoint(BPoint* offset = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendReply(uint32 command, BHandler* reply_to = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendReply(BMessage* the_reply, BHandler* reply_to = NULL, bigtime_t timeout = B_INFINITE_TIMEOUT);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendReply(BMessage* the_reply, BMessenger reply_to, bigtime_t timeout = B_INFINITE_TIMEOUT);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendReply(uint32 command, BMessage* reply_to_reply);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendReply(BMessage* the_reply, BMessage* reply_to_reply, bigtime_t send_timeout = B_INFINITE_TIMEOUT, bigtime_t reply_timeout = B_INFINITE_TIMEOUT);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					ssize_t FlattenedSize() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Flatten(char* buffer, ssize_t size) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Flatten(BDataIO* stream, ssize_t* size = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Unflatten(const char* flat_buffer);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Unflatten(BDataIO* stream);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddSpecifier(const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddSpecifier(const char* property, int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddSpecifier(const char* property, int32 index, int32 range);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddSpecifier(const char* property, const char* name);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddSpecifier(const BMessage* specifier);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetCurrentSpecifier(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetCurrentSpecifier(int32* index, BMessage* specifier = NULL, int32* form = NULL, const char** property = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasSpecifiers() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t PopSpecifier();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddRect(const char* name, BRect a_rect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddPoint(const char* name, BPoint a_point);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddString(const char* name, const char* a_string);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddString(const char* name, const BString& a_string);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddInt8(const char* name, int8 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddInt16(const char* name, int16 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddInt32(const char* name, int32 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddInt64(const char* name, int64 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddBool(const char* name, bool a_boolean);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddFloat(const char* name, float a_float);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddDouble(const char* name, double a_double);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddPointer(const char* name, const void* ptr);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddMessenger(const char* name, BMessenger messenger);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddRef(const char* name, const entry_ref* ref);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddMessage(const char* name, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddFlat(const char* name, BFlattenable* obj, int32 count = 1);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddData(const char* name, type_code type, const void* data, ssize_t numBytes, bool is_fixed_size = true, int32 count = 1);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t RemoveData(const char* name, int32 index = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t RemoveName(const char* name);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t MakeEmpty();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindRect(const char* name, BRect* rect) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindRect(const char* name, int32 index, BRect* rect) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindPoint(const char* name, BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindPoint(const char* name, int32 index, BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindString(const char* name, const char** str) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindString(const char* name, int32 index, const char** str) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindString(const char* name, BString* str) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindString(const char* name, int32 index, BString* str) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt8(const char* name, int8* value) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt8(const char* name, int32 index, int8* val) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt16(const char* name, int16* value) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt16(const char* name, int32 index, int16* val) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt32(const char* name, int32* value) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt32(const char* name, int32 index, int32* val) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt64(const char* name, int64* value) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindInt64(const char* name, int32 index, int64* val) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindBool(const char* name, bool* value) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindBool(const char* name, int32 index, bool* value) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindFloat(const char* name, float* f) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindFloat(const char* name, int32 index, float* f) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindDouble(const char* name, double* d) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindDouble(const char* name, int32 index, double* d) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindPointer(const char* name, void** ptr) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindPointer(const char* name, int32 index, void** ptr) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindMessenger(const char* name, BMessenger* m) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindMessenger(const char* name, int32 index, BMessenger* m) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindRef(const char* name, entry_ref* ref) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindRef(const char* name, int32 index, entry_ref* ref) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindMessage(const char* name, BMessage* msg) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindMessage(const char* name, int32 index, BMessage* msg) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindFlat(const char* name, BFlattenable* obj) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindFlat(const char* name, int32 index, BFlattenable* obj) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindData(const char* name, type_code type, const void** data, ssize_t* numBytes) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindData(const char* name, type_code type, int32 index, const void** data, ssize_t* numBytes) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceRect(const char* name, BRect a_rect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceRect(const char* name, int32 index, BRect a_rect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplacePoint(const char* name, BPoint a_point);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplacePoint(const char* name, int32 index, BPoint a_point);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceString(const char* name, const char* string);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceString(const char* name, int32 index, const char* string);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceString(const char* name, const BString& string);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceString(const char* name, int32 index, const BString& string);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt8(const char* name, int8 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt8(const char* name, int32 index, int8 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt16(const char* name, int16 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt16(const char* name, int32 index, int16 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt32(const char* name, int32 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt32(const char* name, int32 index, int32 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt64(const char* name, int64 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceInt64(const char* name, int32 index, int64 val);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceBool(const char* name, bool a_bool);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceBool(const char* name, int32 index, bool a_bool);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceFloat(const char* name, float a_float);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceFloat(const char* name, int32 index, float a_float);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceDouble(const char* name, double a_double);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceDouble(const char* name, int32 index, double a_double);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplacePointer(const char* name, const void* ptr);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplacePointer(const char* name,int32 index,const void* ptr);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceMessenger(const char* name, BMessenger messenger);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceMessenger(const char* name, int32 index, BMessenger msngr);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceRef( const char* name,const entry_ref* ref);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceRef( const char* name, int32 index, const entry_ref* ref);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceMessage(const char* name, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceMessage(const char* name, int32 index, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceFlat(const char* name, BFlattenable* obj);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceFlat(const char* name, int32 index, BFlattenable* obj);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceData(const char* name, type_code type, const void* data, ssize_t data_size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReplaceData(const char* name, type_code type, int32 index, const void* data, ssize_t data_size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* operator new(size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void operator delete(void* ptr, size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasRect(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasPoint(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasString(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasInt8(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasInt16(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasInt32(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasInt64(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasBool(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasFloat(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasDouble(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasPointer(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasMessenger(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasRef(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasMessage(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasFlat(const char* , const BFlattenable* ) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasFlat(const char* ,int32 ,const BFlattenable* ) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasData(const char* , type_code , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect FindRect(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint FindPoint(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* FindString(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int8 FindInt8(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int16 FindInt16(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindInt32(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int64 FindInt64(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool FindBool(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float FindFloat(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					double FindDouble(const char* , int32 n = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage(BMessage* a_message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					NOTE: Add convenience functions for struct rgb_color
				</task>
			</class>
			<class name="BMessageFilter" owner="Erik Jaesler">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessageFilter(uint32 what, filter_hook func = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessageFilter(message_delivery delivery, message_source source, filter_hook func = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessageFilter(message_delivery delivery, message_source source, uint32 what, filter_hook func = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessageFilter(const BMessageFilter& filter);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessageFilter(const BMessageFilter* filter);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BMessageFilter();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessageFilter& operator=(const BMessageFilter &from);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual filter_result Filter(BMessage* message, BHandler** target);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					message_delivery MessageDelivery() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					message_source MessageSource() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					uint32 Command() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool FiltersAnyCommand() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BLooper* Looper() const;
				</task>
			</class>
			<class name="BMessageQueue" owner="Jeremy Rand">
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BMessageQueue();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					virtual ~BMessageQueue();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					void AddMessage(BMessage* an_event);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					bool RemoveMessage(BMessage* an_event);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BMessage* NextMessage();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BMessage* FindMessage(int32 index) const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BMessage* FindMessage(uint32 what, int32 index = 0) const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					int32 CountMessages() const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					bool IsEmpty() const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					bool Lock();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					void Unlock();
				</task>
			</class>
			<class name="BMessageRunner" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessageRunner(BMessenger target, const BMessage* msg, bigtime_t interval, int32 count = -1);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessageRunner(BMessenger target, const BMessage* msg, bigtime_t interval, int32 count, BMessenger reply_to);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMessageRunner();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t InitCheck() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetInterval(bigtime_t interval);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetCount(int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetInfo(bigtime_t* interval, int32* count) const;
				</task>
			</class>
			<class name="BMessenger" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessenger();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessenger(const char* mime_sig, team_id team = -1, status_t* perr = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessenger(const BHandler* handler, const BLooper* looper = NULL, status_t* perr = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessenger(const BMessenger& from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					~BMessenger();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsTargetLocal() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BHandler* Target(BLooper** looper) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool LockTarget() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t LockTargetWithTimeout(bigtime_t timeout) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendMessage(uint32 command, BHandler* reply_to = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendMessage(BMessage* a_message, BHandler* reply_to = NULL, bigtime_t timeout = B_INFINITE_TIMEOUT) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendMessage(BMessage* a_message, BMessenger reply_to, bigtime_t timeout = B_INFINITE_TIMEOUT) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendMessage(uint32 command, BMessage* reply) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendMessage(BMessage* a_message, BMessage* reply, bigtime_t send_timeout = B_INFINITE_TIMEOUT, bigtime_t reply_timeout = B_INFINITE_TIMEOUT) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessenger& operator=(const BMessenger &from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator==(const BMessenger &other) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsValid() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					team_id Team() const;
				</task>
			</class>
			<functions name="BMessenger Support" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&lt;(const BMessenger & a, const BMessenger & b);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator!=(const BMessenger & a, const BMessenger & b);
				</task>
			</functions>
		</section>
		<section name="BHandler">
			<class name="BHandler" owner="Erik Jaesler">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BHandler(const char* name = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BHandler(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BHandler();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BLooper* Looper() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetName(const char* name);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					const char* Name() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetNextHandler(BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BHandler* NextHandler() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AddFilter(BMessageFilter* filter);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual bool RemoveFilter(BMessageFilter* filter);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetFilterList(BList* filters);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BList* FilterList();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool LockLooper();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					status_t LockLooperWithTimeout(bigtime_t timeout);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void UnlockLooper();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StartWatching(BMessenger, uint32 what);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StartWatchingAll(BMessenger);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StopWatching(BMessenger, uint32 what);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StopWatchingAll(BMessenger);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StartWatching(BHandler* , uint32 what);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StartWatchingAll(BHandler* );
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StopWatching(BHandler* , uint32 what);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StopWatchingAll(BHandler* );
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SendNotices(uint32 what, const BMessage* = 0);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsWatched() const;
				</task>
			</class>
		</section>
		<section name="BLooper">
			<class name="BLooper" owner="Erik Jaesler">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BLooper(const char* name = NULL, int32 priority = B_NORMAL_PRIORITY, int32 port_capacity = B_LOOPER_PORT_DEFAULT_CAPACITY);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BLooper(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BLooper();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t PostMessage(uint32 command);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t PostMessage(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t PostMessage(uint32 command, BHandler* handler, BHandler* reply_to = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t PostMessage(BMessage* message, BHandler* handler, BHandler* reply_to = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DispatchMessage(BMessage* message, BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage* CurrentMessage() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage* DetachCurrentMessage();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessageQueue* MessageQueue() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsMessageWaiting() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddHandler(BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveHandler(BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountHandlers() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BHandler* HandlerAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(BHandler* handler) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BHandler* PreferredHandler() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetPreferredHandler(BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual thread_id Run();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Quit();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool QuitRequested();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Lock();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Unlock();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsLocked() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t LockWithTimeout(bigtime_t timeout);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					thread_id Thread() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					team_id Team() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BLooper* LooperForThread(thread_id tid);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					thread_id LockingThread() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountLocks() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountLockRequests() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					sem_id Sem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AddCommonFilter(BMessageFilter* filter);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool RemoveCommonFilter(BMessageFilter* filter);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetCommonFilterList(BList* filters);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BList* CommonFilterList() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage* MessageFromPort(bigtime_t = B_INFINITE_TIMEOUT);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void task_looper();
				</task>
			</class>
		</section>
		<section name="Roster">
			<class name="BRoster" owner="Joe Banafato">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRoster();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					~BRoster();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsRunning(const char* mime_sig) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsRunning(entry_ref* ref) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					team_id TeamFor(const char* mime_sig) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					team_id TeamFor(entry_ref* ref) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetAppList(BList* team_id_list) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetAppList(const char* sig, BList* team_id_list) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetAppInfo(const char* sig, app_info* info) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetAppInfo(entry_ref* ref, app_info* info) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetRunningAppInfo(team_id team, app_info* info) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetActiveAppInfo(app_info* info) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindApp(const char* mime_type, entry_ref* app) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t FindApp(entry_ref* ref, entry_ref* app) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Broadcast(BMessage* msg) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Broadcast(BMessage* msg, BMessenger reply_to) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StartWatching(BMessenger target, uint32 event_mask = B_REQUEST_LAUNCHED | B_REQUEST_QUIT) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StopWatching(BMessenger target) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ActivateApp(team_id team) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Launch(const char* mime_type, BMessage* initial_msgs = NULL, team_id* app_team = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Launch(const char* mime_type, BList* message_list, team_id* app_team = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Launch(const char* mime_type, int argc, char** args, team_id* app_team = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Launch(const entry_ref* ref, const BMessage* initial_message = NULL, team_id* app_team = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Launch(const entry_ref* ref, const BList* message_list, team_id* app_team = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Launch(const entry_ref* ref, int argc, const char* const* args, team_id* app_team = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetRecentDocuments(BMessage* refList, int32 maxCount, const char* ofType = NULL, const char* openedByAppSig = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetRecentDocuments(BMessage* refList, int32 maxCount, const char* ofTypeList[], int32 ofTypeListCount, const char* openedByAppSig = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetRecentFolders(BMessage* refList, int32 maxCount, const char* openedByAppSig = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetRecentApps(BMessage* refList, int32 maxCount) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddToRecentDocuments(const entry_ref* doc, const char* appSig = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddToRecentFolders(const entry_ref* folder,const char* appSig = NULL) const;
				</task>
			</class>
		</section>
		<section name="Clipboard">
			<class name="BClipboard" owner="Gabe Yoder">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BClipboard(const char* name, bool transient = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BClipboard();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Name() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 LocalCount() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 SystemCount() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StartWatching(BMessenger target);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t StopWatching(BMessenger target);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Lock();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Unlock();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsLocked() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Clear();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Commit();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Revert();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessenger DataSource() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage* Data() const;
				</task>
			</class>
		</section>
		<section name="BCursor">
			<class name="BCursor" owner="Gabe Yoder">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BCursor(const void* cursorData);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BCursor(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BCursor();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* into, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
			</class>
		</section>
		<section name="Scripting Support">
			<class name="BPropertyInfo" owner="Jeremy Rand">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPropertyInfo(property_info* p = NULL, value_info* ci = NULL, bool free_on_delete = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BPropertyInfo();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 FindMatch(BMessage* msg, int32 index, BMessage* spec, int32 form, const char* prop, void* data = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool IsFixedSize() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual type_code TypeCode() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ssize_t FlattenedSize() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Flatten(void* buffer, ssize_t size) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AllowsTypeCode(type_code code) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Unflatten(type_code c, const void* buf, ssize_t s);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const property_info* Properties() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const value_info* Values() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountProperties() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountValues() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void PrintToStream() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static bool FindCommand(uint32, int32, property_info* );
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static bool FindSpecifier(uint32, property_info* );
				</task>
			</class>
		</section>
	</group>
	<group name="Interface Kit">
		<section name="Group 1 Support">
			<class name="BPoint" owner="Greg Gelfond">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint(float X, float Y);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint(const BPoint& pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint& operator=(const BPoint& from);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void Set(float X, float Y);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void ConstrainTo(BRect rect);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void PrintToStream() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint operator+(const BPoint&) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint operator-(const BPoint&) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint& operator+=(const BPoint&);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint& operator-=(const BPoint&);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool operator!=(const BPoint&) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool operator==(const BPoint&) const;
				</task>
			</class>
			<class name="BPolygon" owner="Staffan Hellstrom">
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					BPolygon(const BPoint* ptArray, int32 numPoints);
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					BPolygon();
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					BPolygon(const BPolygon* poly);
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					virtual ~BPolygon();
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					BPolygon& operator=(const BPolygon& from);
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					BRect Frame() const;
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					void AddPoints(const BPoint* ptArray, int32 numPoints);
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					int32 CountPoints() const;
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					void MapTo(BRect srcRect, BRect dstRect);
				</task>
				<task cases="false" fspec="true" impl="true" tests="true" tspec="false">
					void PrintToStream() const;
				</task>
			</class>
			<class name="BRect" owner="Issac Yonemoto">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect(const BRect &);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect(float l, float t, float r, float b);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect(BPoint leftTop, BPoint rightBottom);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect& operator=(const BRect &from);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void Set(float l, float t, float r, float b);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void PrintToStream() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint LeftTop() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint RightBottom() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint LeftBottom() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BPoint RightTop() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetLeftTop(const BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetRightBottom(const BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetLeftBottom(const BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetRightTop(const BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void InsetBy(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void InsetBy(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void OffsetBy(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void OffsetBy(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void OffsetTo(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void OffsetTo(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect& InsetBySelf(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect& InsetBySelf(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect InsetByCopy(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect InsetByCopy(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect& OffsetBySelf(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect& OffsetBySelf(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect OffsetByCopy(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect OffsetByCopy(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect& OffsetToSelf(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect& OffsetToSelf(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect OffsetToCopy(BPoint);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect OffsetToCopy(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool operator==(BRect) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool operator!=(BRect) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect operator&(BRect) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRect operator|(BRect) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool Intersects(BRect r) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsValid() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					float Width() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					int32 IntegerWidth() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					float Height() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					int32 IntegerHeight() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool Contains(BPoint) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool Contains(BRect) const;
				</task>
			</class>
			<class name="BRegion" owner="Issac Yonemoto">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRegion();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRegion(const BRegion &region);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRegion(const BRect rect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BRegion();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRegion& operator=(const BRegion &from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Frame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					clipping_rect FrameInt() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect RectAt(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					clipping_rect RectAtInt(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountRects();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Set(BRect newBounds);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Set(clipping_rect newBounds);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Intersects(BRect r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Intersects(clipping_rect r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Contains(BPoint pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Contains(int32 x, int32 y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void PrintToStream() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void OffsetBy(int32 dh, int32 dv);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MakeEmpty();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Include(BRect r);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Include(clipping_rect r);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Include(const BRegion*);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Exclude(BRect r);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Exclude(clipping_rect r);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Exclude(const BRegion*);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void IntersectWith(const BRegion*);
				</task>
			</class>
		</section>
		<section name="Group 2 Support">
			<class name="BPicture" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture(const BPicture &original);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BPicture();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Play(void* *callBackTable, int32 tableEntries, void* userData);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Flatten(BDataIO* stream);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Unflatten(BDataIO* stream);
				</task>
			</class>
			<class name="BScreen" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScreen(screen_id id = B_MAIN_SCREEN_ID);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScreen(BWindow* win);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					~BScreen();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsValid();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetToNext();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					color_space ColorSpace();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Frame();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					screen_id ID();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t WaitForRetrace();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t WaitForRetrace(bigtime_t timeout);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint8 IndexForColor(rgb_color rgb);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint8 IndexForColor(uint8 r, uint8 g, uint8 b, uint8 a = 255);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color ColorForIndex(const uint8 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint8 InvertIndex(uint8 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const color_map* ColorMap();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetBitmap(BBitmap** screen_shot, bool draw_cursor = true, BRect* bound = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ReadBitmap(BBitmap* buffer, bool draw_cursor = true, BRect* bound = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color DesktopColor();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color DesktopColor(uint32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetDesktopColor(rgb_color rgb, bool stick = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetDesktopColor(rgb_color rgb, uint32 index, bool stick = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t ProposeMode(display_mode* target, const display_mode* low, const display_mode* high);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetModeList(display_mode** mode_list, uint32* count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetMode(display_mode* mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetMode(uint32 workspace, display_mode* mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetMode(display_mode* mode, bool makeDefault = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetMode(uint32 workspace, display_mode* mode, bool makeDefault = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetDeviceInfo(accelerant_device_info* adi);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetPixelClockLimits(display_mode* mode, uint32* low, uint32* high);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetTimingConstraints(display_timing_constraints* dtc);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetDPMS(uint32 dpms_state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 DPMSState(void);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 DPMSCapabilites(void);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPrivateScreen* private_screen();
				</task>
			</class>
			<class name="BShape" owner="Greg Gelfond">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShape();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShape(const BShape& copyFrom);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShape(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BShape();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* into, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Clear();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Bounds() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddShape(const BShape* other);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t MoveTo(BPoint point);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t LineTo(BPoint linePoint);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t BezierTo(BPoint controlPoints[3]);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Close();
				</task>
			</class>
			<class name="BShapeIterator" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShapeIterator();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BShapeIterator();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t IterateMoveTo(BPoint* point);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t IterateLineTo(int32 lineCount, BPoint* linePts);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t IterateBezierTo(int32 bezierCount, BPoint* bezierPts);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t IterateClose();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Iterate(BShape* shape);
				</task>
			</class>
			<functions name="Screen Support" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const color_map* system_colors();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_screen_space(int32 index, uint32 res, bool stick = true);
				</task>
			</functions>
		</section>
		<section name="Group 3 Support">
			<class name="BBitmap" owner="Xavier Castellan">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BBitmap(BRect bounds, uint32 flags, color_space depth, int32 bytesPerRow=B_ANY_BYTES_PER_ROW, screen_id screenID=B_MAIN_SCREEN_ID);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BBitmap(BRect bounds, color_space depth, bool accepts_views = false, bool need_contiguous = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BBitmap(const BBitmap* source, bool accepts_views = false, bool need_contiguous = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BBitmap(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BBitmap();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t InitCheck() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsValid() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t LockBits(uint32* state=NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void UnlockBits();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					area_id Area() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* Bits() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 BitsLength() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 BytesPerRow() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					color_space ColorSpace() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Bounds() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetBits(const void* data, int32 length, int32 offset, color_space cs);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetOverlayRestrictions(overlay_restrictions* restrict) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AddChild(BView* view);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool RemoveChild(BView* view);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountChildren() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* ChildAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* FindView(const char* view_name) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* FindView(BPoint point) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Lock();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Unlock();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsLocked() const;
				</task>
			</class>
			<class name="BFont" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BFont();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BFont(const BFont &font);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BFont(const BFont* font);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetFamilyAndStyle(const font_family family,
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetFamilyAndStyle(uint32 code);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetFamilyAndFace(const font_family family, uint16 face);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetSize(float size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetShear(float shear);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetRotation(float rotation);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetSpacing(uint8 spacing);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetEncoding(uint8 encoding);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetFace(uint16 face);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetFlags(uint32 flags);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetFamilyAndStyle(font_family* family, font_style* style) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 FamilyAndStyle() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Size() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Shear() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Rotation() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint8 Spacing() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint8 Encoding() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint16 Face() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 Flags() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					font_direction Direction() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsFixed() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsFullAndHalfFixed() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect BoundingBox() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					unicode_block Blocks() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					font_file_format FileFormat() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountTuned() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetTunedInfo(int32 index, tuned_font_info* info) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void TruncateString(BString* in_out, uint32 mode, float width) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetTruncatedStrings(const char* stringArray[], int32 numStrings, uint32 mode, float width, BString resultArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetTruncatedStrings(const char* stringArray[], int32 numStrings, uint32 mode, float width, char* resultArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float StringWidth(const char* string) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float StringWidth(const char* string, int32 length) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetStringWidths(const char* stringArray[], const int32 lengthArray[], int32 numStrings, float widthArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetEscapements(const char charArray[], int32 numChars, float escapementArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetEscapements(const char charArray[], int32 numChars, escapement_delta* delta, float escapementArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetEscapements(const char charArray[], int32 numChars, escapement_delta* delta, BPoint escapementArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetEscapements(const char charArray[], int32 numChars, escapement_delta* delta, BPoint escapementArray[], BPoint offsetArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetEdges(const char charArray[], int32 numBytes, edge_info edgeArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetHeight(font_height* height) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetBoundingBoxesAsGlyphs(const char charArray[], int32 numChars, font_metric_mode mode, BRect boundingBoxArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetBoundingBoxesAsString(const char charArray[], int32 numChars, font_metric_mode mode, escapement_delta* delta, BRect boundingBoxArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetBoundingBoxesForStrings(const char* stringArray[], int32 numStrings, font_metric_mode mode, escapement_delta deltas[], BRect boundingBoxArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetGlyphShapes(const char charArray[], int32 numChars, BShape* glyphShapeArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetHasGlyphs(const char charArray[], int32 numChars, bool hasArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BFont& operator=(const BFont &font);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator==(const BFont &font) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator!=(const BFont &font) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void PrintToStream() const;
				</task>
			</class>
			<functions name="Font Support" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 count_font_families();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_font_family(int32 index, font_family* name, uint32* flags = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 count_font_styles(font_family name);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_font_style(font_family family, int32 index, font_style* name, uint32* flags = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_font_style(font_family family, int32 index, font_style* name, uint16* face, uint32* flags = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool update_font_families(bool check_only);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_font_cache_info(uint32 id, void* set);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_font_cache_info(uint32 id, void* set);
				</task>
			</functions>
		</section>
		<section name="Control Widgets">
			<class name="BControl" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BControl(BRect frame, const char* name, const char* label, BMessage* message, uint32 resizeMask, uint32 flags);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BControl(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BControl();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseDown(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetLabel(const char* text);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					const char* Label() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					int32 Value() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetEnabled(bool on);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsEnabled() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsFocusChanging() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsTracking() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetTracking(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetValueNoUpdate(int32 value);
				</task>
			</class>
			<class name="BButton" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BButton(BRect frame, const char* name, const char* label, BMessage* message, uint32 resizeMask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BButton(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BButton();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeDefault(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetLabel(const char* text);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsDefault() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
			<class name="BCheckBox" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BCheckBox(BRect frame, const char* name, const char* label, BMessage* message, uint32 resizeMask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BCheckBox(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BCheckBox();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
			</class>
			<class name="BColorControl" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BColorControl(BPoint start, color_control_layout layout, float cell_size, const char *name, BMessage *message = NULL, bool use_offscreen = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BColorControl(BMessage *data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BColorControl();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable *Instantiate(BMessage *data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage *data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetValue(int32 color_value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetValue(rgb_color color);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color ValueAsColor();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage *msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char *bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetCellSize(float size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float CellSize() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLayout(color_control_layout layout);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					color_control_layout Layout() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage *msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float *width, float *height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Invoke(BMessage *msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler *ResolveSpecifier(BMessage *msg, int32 index, BMessage *specifier, int32 form, const char *property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage *data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
			</class>
			<class name="BPictureButton" owner="Graham Macdonald">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPictureButton(BRect frame, const char* name, BPicture* off, BPicture* on, BMessage* message, uint32 behavior = B_ONE_STATE_BUTTON, uint32 resizeMask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flgs = B_WILL_DRAW | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPictureButton(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BPictureButton();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabledOn(BPicture* on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabledOff(BPicture* off);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetDisabledOn(BPicture* on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetDisabledOff(BPicture* off);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture* EnabledOn() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture* EnabledOff() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture* DisabledOn() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture* DisabledOff() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetBehavior(uint32 behavior);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 Behavior() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
			</class>
			<class name="BRadioButton" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRadioButton(BRect frame, const char* name, const char* label, BMessage* message, uint32 resizMask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BRadioButton(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BRadioButton();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
			<class name="BSlider" owner="Staffan Hellstrom">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BSlider(BRect frame, const char* name, const char* label, BMessage* message, int32 minValue, int32 maxValue, thumb_style thumbType = B_BLOCK_THUMB, uint32 resizingMode = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_NAVIGABLE | B_WILL_DRAW | B_FRAME_EVENTS);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BSlider(BRect frame, const char* name, const char* label, BMessage* message, int32 minValue, int32 maxValue, orientation posture /*= B_HORIZONTAL*/, thumb_style thumbType = B_BLOCK_THUMB, uint32 resizingMode = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_NAVIGABLE | B_WILL_DRAW | B_FRAME_EVENTS);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BSlider(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BSlider();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float w,float h);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 n);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 c, const BMessage* m);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Pulse();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLabel(const char* label);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLimitLabels(const char* minLabel, const char* maxLabel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MinLimitLabel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MaxLimitLabel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetValue(int32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 ValueForPoint(BPoint) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetPosition(float);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Position() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetLimits(int32* minimum, int32* maximum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawSlider();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawBar();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawHashMarks();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawThumb();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawFocusMark();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawText();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual char* UpdateText() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BRect BarFrame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BRect HashMarksFrame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BRect ThumbFrame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFlags(uint32 flags);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetResizingMode(uint32 mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize( float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg=NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetModificationMessage(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage* ModificationMessage() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetSnoozeAmount(int32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 SnoozeAmount() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetKeyIncrementValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 KeyIncrementValue() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetHashMarkCount(int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 HashMarkCount() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetHashMarks(hash_mark_location where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					hash_mark_location HashMarks() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetStyle(thumb_style s);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					thumb_style Style() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetBarColor(rgb_color);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color BarColor() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void UseFillColor(bool, const rgb_color* c=NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool FillColor(rgb_color*) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* OffscreenView() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					orientation Orientation() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetOrientation(orientation);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float BarThickness() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetBarThickness(float thickness);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFont(const BFont* font, uint32 properties = B_FONT_ALL);
				</task>
			</class>
			<class name="BTab" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTab(BView* contents=NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTab(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BTab();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(uint32 d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Label() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLabel(const char* label);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsSelected() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Select(BView* owner);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Deselect();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEnabled() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MakeFocus(bool infocus=true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsFocus() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetView(BView* contents);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* View() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawFocusMark(BView* owner, BRect tabFrame);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawLabel(BView* owner, BRect tabFrame);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawTab(BView* owner, BRect tabFrame, tab_position, bool full=true);
				</task>
			</class>
			<class name="BTabView" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTabView(BRect frame, const char* name, button_width width = B_WIDTH_AS_USUAL, uint32 resizingMode = B_FOLLOW_ALL, uint32 flags = B_FULL_UPDATE_ON_RESIZE | B_WILL_DRAW | B_NAVIGABLE_JUMP | B_FRAME_EVENTS | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTabView(BMessage*);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BTabView();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage*);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage*, bool deep=true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float w,float h);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 n);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Pulse();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Select(int32 tabIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 Selection() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool focusState = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFocusTab(int32 tabIndex, bool focusState);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FocusTab() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BRect DrawTabs();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawBox(BRect selectedTabFrame);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BRect TabFrame(int32 tabIndex) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFlags(uint32 flags);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetResizingMode(uint32 mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize( float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AddTab(BView* tabContents, BTab* tab=NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BTab* RemoveTab(int32 tabIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BTab* TabAt(int32 tabIndex) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetTabWidth(button_width s);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					button_width TabWidth() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetTabHeight(float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float TabHeight() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* ContainerView() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountTabs() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* ViewForTab(int32 tabIndex) const;
				</task>
			</class>
		</section>
		<section name="Non-Control Widgets">
			<class name="BBox" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BBox(BRect bounds, const char* name = NULL, uint32 resizeFlags = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_FRAME_EVENTS | B_NAVIGABLE_JUMP, border_style border = B_FANCY_BORDER);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BBox(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BBox(void);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetBorder(border_style style);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					border_style Border() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetLabel(const char* label);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					status_t SetLabel(BView* view_label);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					const char* Label() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BView* LabelView() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void Draw(BRect bounds);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseDown(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
			<class name="BStringView" owner="">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BStringView(BRect bounds, const char* name, const char* text, uint32 resizeFlags = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BStringView(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BStringView();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetText(const char* text);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					const char* Text() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void SetAlignment(alignment flag);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					alignment Alignment() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void Draw(BRect bounds);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseDown(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
			<class name="BStatusBar" owner="Marc Flerackers">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BStatusBar(BRect frame, const char* name, const char* label = NULL, const char* trailing_label = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BStatusBar(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BStatusBar();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetBarColor(rgb_color color);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetBarHeight(float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetText(const char* str);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetTrailingText(const char* str);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetMaxValue(float max);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Update(float delta, const char* main_text = NULL, const char* trailing_text = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Reset(const char* label = NULL, const char* trailing_label = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float CurrentValue() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float MaxValue() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color BarColor() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float BarHeight() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Text() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* TrailingText() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Label() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* TrailingLabel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
		</section>
		<section name="Scrolling Support">
			<class name="BScrollBar" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScrollBar(BRect frame, const char* name, BView* target, float min, float max, orientation direction);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScrollBar(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BScrollBar();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetValue(float value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Value() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetProportion(float);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Proportion() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ValueChanged(float newValue);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetRange(float min, float max);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetRange(float* min, float* max) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetSteps(float smallStep, float largeStep);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetSteps(float* smallStep, float* largeStep) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTarget(BView* target);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTarget(const char* targetName);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* Target() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					orientation Orientation() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
			<class name="BScrollView" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScrollView(const char* name, BView* target, uint32 resizeMask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = 0, bool horizontal = false, bool vertical = false, border_style border = B_FANCY_BORDER);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScrollView(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BScrollView();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScrollBar* ScrollBar(orientation flag) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetBorder(border_style border);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					border_style Border() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetBorderHighlighted(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsBorderHighlighted() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTarget(BView* new_target);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* Target() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
			<functions name="Scrollbar Config" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_scroll_bar_info(scroll_bar_info* info);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_scroll_bar_info(scroll_bar_info* info);
				</task>
			</functions>
		</section>
		<section name="Menuing Support">
			<class name="BMenu" owner="Justin Gasper">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu(const char* title, menu_layout layout = B_ITEMS_IN_COLUMN);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu(const char* title, float width, float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMenu();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(BMenuItem* item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(BMenuItem* item, int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(BMenuItem* item, BRect frame);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(BMenu* menu);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(BMenu* menu, int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(BMenu* menu, BRect frame);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddList(BList* list, int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddSeparatorItem();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveItem(BMenuItem* item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* RemoveItem(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveItems(int32 index, int32 count, bool del = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveItem(BMenu* menu);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* ItemAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu* SubmenuAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountItems() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(BMenuItem* item) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(BMenu* menu) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* FindItem(uint32 command) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* FindItem(const char* name) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetTargetForItems(BHandler* target);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetTargetForItems(BMessenger messenger);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetRadioMode(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetTriggersEnabled(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetMaxContentWidth(float max);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetLabelFromMarked(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsLabelFromMarked();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEnabled() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsRadioMode() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AreTriggersEnabled() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsRedrawAfterSticky() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float MaxContentWidth() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* FindMarked();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu* Supermenu() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* Superitem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void InvalidateLayout();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu(BRect frame, const char* viewName, uint32 resizeMask, uint32 flags, menu_layout layout, bool resizeToFit);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BPoint ScreenLocation();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetItemMargins(float left, float top, float right, float bottom);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetItemMargins(float* left, float* top, float* right,float* bottom) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					menu_layout Layout() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Show();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Show(bool selectFirstItem);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Hide();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* Track(bool start_opened = false, BRect* special_rect = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddDynamicItem(add_state s);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawBackground(BRect update);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTrackingHook(menu_tracking_hook func, void* state);
				</task>
			</class>
			<class name="BMenuBar" owner="Justin Gasper">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuBar(BRect frame, const char* title, uint32 resizeMask = B_FOLLOW_LEFT_RIGHT | B_FOLLOW_TOP, menu_layout layout = B_ITEMS_IN_ROW, bool resizeToFit = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuBar(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMenuBar();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetBorder(menu_bar_border border);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					menu_bar_border Border() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Show();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Hide();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
			</class>
			<class name="BMenuItem" owner="Justin Gasper">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem(const char* label, BMessage* message, char shortcut = 0, uint32 modifiers = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem(BMenu* menu, BMessage* message = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMenuItem();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLabel(const char* name);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetMarked(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetTrigger(char ch);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetShortcut(char ch, uint32 modifiers);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Label() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEnabled() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsMarked() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					char Trigger() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					char Shortcut(uint32* modifiers = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu* Submenu() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu* Menu() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Frame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetContentSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void TruncateLabel(float max, char* new_label);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawContent();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Highlight(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsSelected() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint ContentLocation() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
			</class>
			<class name="BSeparatorItem" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BSeparatorItem();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BSeparatorItem(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BSeparatorItem();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetContentSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw();
				</task>
			</class>
			<class name="BMenuField" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuField(BRect frame, const char* name, const char* label, BMenu* menu, uint32 resize = B_FOLLOW_LEFT|B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuField(BRect frame, const char* name, const char* label, BMenu* menu, bool fixed_size, uint32 resize = B_FOLLOW_LEFT|B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuField(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMenuField();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect update);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenu* Menu() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuBar* MenuBar() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* MenuItem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLabel(const char* label);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Label() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEnabled() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetAlignment(alignment label);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					alignment Alignment() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetDivider(float dividing_line);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Divider() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ShowPopUpMarker();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void HidePopUpMarker();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
			</class>
			<class name="BPopUpMenu" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPopUpMenu(const char* title, bool radioMode = true, bool autoRename = true, menu_layout layout = B_ITEMS_IN_COLUMN);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPopUpMenu(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BPopUpMenu();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* Go(BPoint where, bool delivers_message = false, bool open_anyway = false, bool async = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuItem* Go(BPoint where, bool delivers_message, bool open_anyway, BRect click_to_open, bool async = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetAsyncAutoDestruct(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AsyncAutoDestruct() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BPoint ScreenLocation();
				</task>
			</class>
			<functions name="Menu Config" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_menu_info(menu_info* info);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_menu_info(menu_info* info);
				</task>
			</functions>
		</section>
		<section name="ListView Support">
			<class name="BListItem" owner="Ulrich Wimboeck">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem(uint32 outlineLevel = 0, bool expanded = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BListItem();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Height() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float Width() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsSelected() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Select();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Deselect();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEnabled() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetHeight(float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetWidth(float width);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawItem(BView* owner, BRect bounds, bool complete = false) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Update(BView* owner, const BFont* font);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsExpanded() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetExpanded(bool expanded);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 OutlineLevel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsItemVisible() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetItemVisible(bool);
				</task>
			</class>
			<class name="BStringItem" owner="Greg Gelfond">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BStringItem(const char* text, uint32 outlineLevel = 0, bool expanded = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BStringItem();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BStringItem(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawItem(BView* owner, BRect frame, bool complete = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetText(const char* text);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Text() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Update(BView* owner, const BFont* font);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
			</class>
			<class name="BListView" owner="Ulrich Wimboeck">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListView(BRect frame, const char *name, list_view_type type = B_SINGLE_SELECTION_LIST, uint32 resizeMask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_FRAME_EVENTS | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListView(BMessage *data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BListView();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable *Instantiate(BMessage *data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage *data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage *msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char *bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float newWidth, float newHeight);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void TargetedByScrollView(BScrollView *scroller);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ScrollTo(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ScrollTo(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddItem(BListItem *item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddItem(BListItem *item, int32 atIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddList(BList *newItems);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddList(BList *newItems, int32 atIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool RemoveItem(BListItem *item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BListItem *RemoveItem(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool RemoveItems(int32 index, int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetSelectionMessage(BMessage *message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetInvocationMessage(BMessage *message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage *SelectionMessage() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 SelectionCommand() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage *InvocationMessage() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 InvocationCommand() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetListType(list_view_type type);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					list_view_type ListType() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem *ItemAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(BPoint point) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(BListItem *item) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem *FirstItem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem *LastItem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasItem(BListItem *item) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountItems() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeEmpty();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEmpty() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DoForEach(bool (*func)(BListItem *));
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DoForEach(bool (*func)(BListItem *, void *), void *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const BListItem **Items() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void InvalidateItem(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ScrollToSelection();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Select(int32 index, bool extend = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Select(int32 from, int32 to, bool extend = false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsItemSelected(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CurrentSelection(int32 index = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Invoke(BMessage *msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DeselectAll();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DeselectExcept(int32 except_from, int32 except_to);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Deselect(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SelectionChanged();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SortItems(int (*cmp)(const void *, const void *));
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool SwapItems(int32 a, int32 b);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool MoveItem(int32 from, int32 to);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool ReplaceItem(int32 index, BListItem * item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect ItemFrame(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler *ResolveSpecifier(BMessage *msg, int32 index, BMessage *specifier, int32 form, const char *property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage *data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void *arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage *msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool InitiateDrag(BPoint pt, int32 itemIndex, bool initialySelected);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float *width, float *height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool DoMiscellaneous(MiscCode code, MiscData * data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawItem(BListItem *item, BRect itemRect, bool complete = false);
				</task>
			</class>
			<class name="BOutlineListView" owner="Ulrich Wimboeck">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BOutlineListView(BRect frame, const char* name, list_view_type type = B_SINGLE_SELECTION_LIST, uint32 resizeMask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_FRAME_EVENTS | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BOutlineListView(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BOutlineListView();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddUnder(BListItem* item, BListItem* underItem);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddItem(BListItem* item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddItem(BListItem* item, int32 fullListIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddList(BList* newItems);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AddList(BList* newItems, int32 fullListIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool RemoveItem(BListItem* item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BListItem* RemoveItem(int32 fullListIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool RemoveItems(int32 fullListIndex, int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem* FullListItemAt(int32 fullListIndex) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FullListIndexOf(BPoint point) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FullListIndexOf(BListItem* item) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem* FullListFirstItem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem* FullListLastItem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool FullListHasItem(BListItem* item) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FullListCountItems() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FullListCurrentSelection(int32 index = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeEmpty();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool FullListIsEmpty() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FullListDoForEach(bool (*func)(BListItem* ));
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FullListDoForEach(bool (*func)(BListItem* , void* ), void*);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem* Superitem(const BListItem* item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Expand(BListItem* item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Collapse(BListItem* item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsExpanded(int32 fullListIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FullListSortItems(int (*compareFunc)(const BListItem* , const BListItem* ));
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SortItemsUnder(BListItem* underItem, bool oneLevelOnly, int (*compareFunc)(const BListItem* , const BListItem*));
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountItemsUnder(BListItem* under, bool oneLevelOnly) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem* EachItemUnder(BListItem* underItem, bool oneLevelOnly, BListItem* (*eachFunc)(BListItem* , void* ), void* );
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BListItem* ItemUnderAt(BListItem* underItem, bool oneLevelOnly, int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool DoMiscellaneous(MiscCode code, MiscData* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* );
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ExpandOrCollapse(BListItem* underItem, bool expand);
				</task>
			</class>
		</section>
		<section name="TextView Support">
			<class name="BTextView" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTextView(BRect frame, const char* name, BRect textRect, uint32 resizeMask, uint32 flags = B_WILL_DRAW | B_PULSE_NEEDED);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTextView(BRect frame, const char* name, BRect textRect, const BFont* initialFont, const rgb_color* initialColor, uint32 resizeMask, uint32 flags);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTextView(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BTextView();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect inRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint where, uint32 code, const BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Pulse();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float width, float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool focusState = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* message, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetText(const char* inText, const text_run_array* inRuns = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetText(const char* inText, int32 inLength, const text_run_array* inRuns = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetText(BFile* inFile, int32 startOffset, int32 inLength, const text_run_array* inRuns = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Insert(const char* inText, const text_run_array* inRuns = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Insert(const char* inText, int32 inLength, const text_run_array* inRuns = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Insert(int32 startOffset, const char* inText, int32 inLength, const text_run_array* inRuns = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Delete();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Delete(int32 startOffset, int32 endOffset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Text() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 TextLength() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetText(int32 offset, int32 length, char* buffer) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uchar ByteAt(int32 offset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountLines() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CurrentLine() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GoToLine(int32 lineNum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Cut(BClipboard* clipboard);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Copy(BClipboard* clipboard);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Paste(BClipboard* clipboard);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Clear();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AcceptsPaste(BClipboard* clipboard);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool AcceptsDrop(const BMessage* inMessage);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Select(int32 startOffset, int32 endOffset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SelectAll();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetSelection(int32* outStart, int32* outEnd) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetFontAndColor(const BFont* inFont, uint32 inMode = B_FONT_ALL, const rgb_color* inColor = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetFontAndColor(int32 startOffset, int32 endOffset, const BFont* inFont, uint32 inMode = B_FONT_ALL, const rgb_color* inColor = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetFontAndColor(int32 inOffset, BFont* outFont, rgb_color* outColor = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetFontAndColor(BFont* outFont, uint32* outMode, rgb_color* outColor = NULL, bool* outEqColor = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetRunArray(int32 startOffset, int32 endOffset, const text_run_array* inRuns);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					text_run_array* RunArray(int32 startOffset, int32 endOffset, int32* outSize = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 LineAt(int32 offset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 LineAt(BPoint point) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint PointAt(int32 inOffset, float* outHeight = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 OffsetAt(BPoint point) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 OffsetAt(int32 line) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FindWord(int32 inOffset, int32* outFromOffset, int32* outToOffset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool CanEndLine(int32 offset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float LineWidth(int32 lineNum = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float LineHeight(int32 lineNum = 0) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float TextHeight(int32 startLine, int32 endLine) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetTextRegion(int32 startOffset, int32 endOffset, BRegion* outRegion) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ScrollToOffset(int32 inOffset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ScrollToSelection();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Highlight(int32 startOffset, int32 endOffset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTextRect(BRect rect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect TextRect() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetStylable(bool stylable);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsStylable() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTabWidth(float width);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float TabWidth() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MakeSelectable(bool selectable = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsSelectable() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MakeEditable(bool editable = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEditable() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetWordWrap(bool wrap);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool DoesWordWrap() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetMaxBytes(int32 max);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 MaxBytes() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DisallowChar(uint32 aChar);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AllowChar(uint32 aChar);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetAlignment(alignment flag);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					alignment Alignment() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetAutoindent(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool DoesAutoindent() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetColorSpace(color_space colors);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					color_space ColorSpace() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MakeResizable(bool resize, BView* resizeView = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsResizable() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetDoesUndo(bool undo);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool DoesUndo() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void HideTyping(bool enabled);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsTypingHidden(void) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static void* FlattenRunArray(const text_run_array* inArray, int32* outSize = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static text_run_array* UnflattenRunArray(const void *data, int32* outSize = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void InsertText(const char* inText, int32 inLength, int32 inOffset, const text_run_array* inRuns);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DeleteText(int32 fromOffset, int32 toOffset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Undo(BClipboard* clipboard);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					undo_state UndoState(bool* isRedo) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetDragParameters(BMessage* drag, BBitmap** bitmap, BPoint* point, BHandler** handler);
				</task>
			</class>
			<class name="BTextControl" owner="">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BTextControl(BRect frame, const char* name, const char* label, const char* initial_text, BMessage* message, uint32 rmask = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW | B_NAVIGABLE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BTextControl(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BTextControl();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetText(const char* text);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					const char* Text() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t Invoke(BMessage* msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BTextView* TextView() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetModificationMessage(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BMessage* ModificationMessage() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetAlignment(alignment label, alignment text);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void GetAlignment(alignment* label, alignment* text) const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetDivider(float dividing_line);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					float Divider() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MakeFocus(bool focusState = true);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetEnabled(bool state);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void WindowActivated(bool active);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual void SetFlags(uint32 flags);
				</task>
			</class>
		</section>
		<section name="Miscellaneous">
			<class name="BAlert" owner="Erik Jaesler">
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					BAlert(const char *title, const char *text, const char *button1, const char *button2 = NULL, const char *button3 = NULL, button_width width = B_WIDTH_AS_USUAL, alert_type type = B_INFO_ALERT);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					BAlert(const char *title, const char *text, const char *button1, const char *button2, const char *button3, button_width width, button_spacing spacing, alert_type type = B_INFO_ALERT);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					BAlert(BMessage *data);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					~BAlert();
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					static BArchivable *Instantiate(BMessage *data);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual status_t Archive(BMessage *data, bool deep = true) const;
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					void SetShortcut(int32 button_index, char key);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					char Shortcut(int32 button_index) const;
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					int32 Go();
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					status_t Go(BInvoker *invoker);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual void MessageReceived(BMessage *an_event);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					BButton* ButtonAt(int32 index) const;
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					BTextView* TextView() const;
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage *msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual void DispatchMessage(BMessage* msg, BHandler* handler);
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual void Quit();
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					virtual bool QuitRequested();
				</task>
				<task cases="false" fspec="true" impl="true" tests="false" tspec="false">
					static BPoint AlertPosition(float width, float height);
				</task>
			</class>
			<class name="BDeskbar" owner="Jeremy Rand">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BDeskbar();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					~BDeskbar();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Frame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					deskbar_location Location(bool* isExpanded=NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetLocation(deskbar_location location, bool expanded=false);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsExpanded() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Expand(bool yn);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetItemInfo(int32 id, const char** name) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetItemInfo(const char* name, int32* id) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasItem(int32 id) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasItem(const char* name) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 CountItems() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddItem(BView* archivableView, int32* id=NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddItem(entry_ref* addon, int32* id=NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t RemoveItem(int32 id);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t RemoveItem(const char* name);
				</task>
			</class>
			<class name="unicode_block" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					unicode_block();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					unicode_block(uint64 block2, uint64 block1);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool Includes(const unicode_block &block) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					unicode_block operator&(const unicode_block &block) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					unicode_block operator|(const unicode_block &block) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					unicode_block& operator=(const unicode_block &block);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator==(const unicode_block &block) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator!=(const unicode_block &block) const;
				</task>
			</class>
			<functions name="Deskbar Support" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_deskbar_frame(BRect* frame);
				</task>
			</functions>
			<functions name="Mouse Config" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_mouse_type(int32* type);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_mouse_type(int32 type);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_mouse_map(mouse_map* map);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_mouse_map(mouse_map* map);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_click_speed(bigtime_t* speed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_click_speed(bigtime_t speed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_mouse_speed(int32* speed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_mouse_speed(int32 speed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_mouse_acceleration(int32* speed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_mouse_acceleration(int32 speed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void set_focus_follows_mouse(bool follow);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool focus_follows_mouse();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void set_mouse_mode(mode_mouse mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					mode_mouse mouse_mode();
				</task>
			</functions>
			<functions name="Workspace Support" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 count_workspaces();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void set_workspace_count(int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 current_workspace();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void activate_workspace(int32 workspace);
				</task>
			</functions>
			<functions name="Keyboard Config" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_key_repeat_rate(int32* rate);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_key_repeat_rate(int32 rate);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_key_repeat_delay(bigtime_t* delay);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t set_key_repeat_delay(bigtime_t delay);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 modifiers();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_key_info(key_info* info);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void get_key_map(key_map** map, char** key_buffer);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t get_keyboard_id(uint16* id);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void set_modifier_key(uint32 modifier, uint32 key);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void set_keyboard_locks(uint32 modifiers);
				</task>
			</functions>
			<functions name="UI Color Info" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color keyboard_navigation_color();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color ui_color(color_which which);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color tint_color(rgb_color color, float tint);
				</task>
			</functions>
			<functions name="Miscellaneous" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bigtime_t idle_time();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void run_select_printer_panel();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void run_add_printer_panel();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void run_be_about();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t _init_interface_kit_();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void _ReservedShelf1__6BShelfFv(BShelf* const, int32, const BMessage*, const BView*);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 _rule_(uint32 r1, uint32 r2, uint32 r3, uint32 r4);
				</task>
			</functions>
		</section>
		<section name="Replicant Support">
			<class name="BDragger" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BDragger(BRect bounds, BView* target, uint32 rmask = B_FOLLOW_NONE, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BDragger(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BDragger();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect update);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static status_t ShowAllDraggers(); /* system wide!*/
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static status_t HideAllDraggers(); /* system wide!*/
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static bool AreDraggersDrawn();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool state = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetPopUp(BPopUpMenu* context_menu);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPopUpMenu* PopUp() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool InShelf() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* Target() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BBitmap* DragBitmap(BPoint* offset, drawing_mode* mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsVisibilityChanging() const;
				</task>
			</class>
			<class name="BShelf" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShelf(BView* view, bool allow_drags = true, const char* shelf_type = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShelf(const entry_ref* ref, BView* view, bool allow_drags = true, const char* shelf_type = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShelf(BDataIO* stream, BView* view, bool allow_drags = true, const char* shelf_type = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BShelf(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BShelf();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t Save();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetDirty(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsDirty() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AllowsDragging() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetAllowsDragging(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AllowsZombies() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetAllowsZombies(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool DisplaysZombies() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetDisplaysZombies(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsTypeEnforced() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTypeEnforced(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetSaveLocation(BDataIO* data_io);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetSaveLocation(const entry_ref* ref);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BDataIO* SaveLocation(entry_ref* ref) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddReplicant(BMessage* data, BPoint location);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t DeleteReplicant(BView* replicant);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t DeleteReplicant(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t DeleteReplicant(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountReplicants() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage* ReplicantAt(int32 index, BView** view = NULL, uint32* uid = NULL, status_t* perr = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(const BView* replicant_view) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(const BMessage* archive) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(uint32 id) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool CanAcceptReplicantMessage(BMessage*) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool CanAcceptReplicantView(BRect, BView*, BMessage*) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BPoint AdjustReplicantBy(BRect, BMessage*) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ReplicantDeleted(int32 index, const BMessage* archive, const BView* replicant);
				</task>
			</class>
		</section>
		<section name="Advanced Control Widgets">
			<class name="BChannelControl" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BChannelControl(BRect frame, const char * name, const char * label, BMessage * model, int32 channel_count = 1, uint32 resize = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BChannelControl(BMessage* from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BChannelControl();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* into, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect area) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 size) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float width, float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFont(const BFont* font, uint32 mask = B_FONT_ALL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler *ResolveSpecifier(BMessage *msg, int32 index, BMessage *specifier, int32 form, const char *property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage *data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetModificationMessage(BMessage *message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage *ModificationMessage() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Invoke(BMessage *msg = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t InvokeChannel(BMessage *msg = NULL, int32 from_channel = 0, int32 channel_count = -1, const bool* in_mask = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t InvokeNotifyChannel(BMessage *msg = NULL, uint32 kind = B_CONTROL_INVOKED, int32 from_channel = 0, int32 channel_count = -1, const bool* in_mask = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual voidSetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetCurrentChannel(int32 channel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CurrentChannel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 CountChannels() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 MaxChannelCount() const = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetChannelCount(int32 channel_count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 ValueFor(int32 channel) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 GetValue(int32* out_values, int32 from_channel, int32 channel_count) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetValueFor(int32 channel, int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetValue(int32 from_channel, int32 channel_count, const int32* in_values);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetAllValue(int32 values);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetLimitsFor(int32 channel, int32 minimum, int32 maximum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetLimitsFor(int32 channel, int32* minimum, int32* maximum) const ;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetLimitsFor(int32 from_channel, int32 channel_count, const int32* minimum, const int32* maximum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetLimitsFor(int32 from_channel, int32 channel_count, int32* minimum, int32* maximum) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetLimits(int32 minimum, int32 maximum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetLimits(int32* outMinimum, int32* outMaximum) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool SupportsIndividualLimits() const = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetLimitLabels(const char* min_label, const char* max_label);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MinLimitLabel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MaxLimitLabel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetLimitLabelsFor(int32 channel, const char* minLabel, const char* maxLabel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetLimitLabelsFor(int32 from_channel, int32 channel_count, const char* minLabel, const char* maxLabel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MinLimitLabelFor(int32 channel) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MaxLimitLabelFor(int32 channel) const;
				</task>
			</class>
			<class name="BChannelSlider" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BChannelSlider(BRect area, const char* name, const char* label, BMessage* model, int32 channels = 1, uint32 resize = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BChannelSlider(BRect area, const char* name, const char* label, BMessage* model, orientation o, int32 channels = 1, uint32 resize = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BChannelSlider(BMessage* from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BChannelSlider();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* into, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual orientation Orientation() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetOrientation(orientation o);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 MaxChannelCount() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool SupportsIndividualLimits() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect area);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint pt, uint32 code, const BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyUp(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float width, float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFont(const BFont* font, uint32 mask = B_FONT_ALL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool focusState = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetEnabled(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawChannel(BView* into, int32 channel, BRect area, bool pressed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawGroove(BView* into, int32 channel, BPoint tl, BPoint br);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawThumb(BView* into, int32 channel, BPoint where, bool pressed );
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual const BBitmap* ThumbFor(int32 channel, bool pressed);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BRect ThumbFrameFor(int32 channel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual float ThumbDeltaFor(int32 channel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual float ThumbRangeFor(int32 channel);
				</task>
			</class>
			<class name="BMultiChannelControl" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMultiChannelControl(BRect frame, const char* name, const char* label, BMessage* model, int32 channel_count = 1, uint32 resize = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMultiChannelControl(BMessage* from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMultiChannelControl();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* into, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect area) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 size) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float width, float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFont(const BFont* font, uint32 mask = B_FONT_ALL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetCurrentChannel(int32 channel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CurrentChannel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 CountChannels() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 MaxChannelCount() const = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetChannelCount(int32 channel_count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 ValueFor(int32 channel) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 GetValues(int32* out_values, int32 from_channel, int32 channel_count) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetValueFor(int32 channel, int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetValues(int32 from_channel, int32 channel_count, const int32* in_values);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetAllValues(int32 values);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetLimitsFor(int32 channel, int32 minimum, int32 maximum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetLimitsFor(int32 channel, int32* minimum, int32* maximum) const ;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetLimits(int32 from_channel, int32 channel_count, const int32* minimum, const int32* maximum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetLimits(int32 from_channel, int32 channel_count, int32* minimum, int32* maximum) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetAllLimits(int32 minimum, int32 maximum);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetLimitLabels(const char* min_label, const char* max_label);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MinLimitLabel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* MaxLimitLabel() const;
				</task>
			</class>
			<class name="BOptionControl" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BOptionControl(BRect frame, const char* name, const char* label, BMessage* message, uint32 resize = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BOptionControl();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddOption(const char* name, int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual boolGetOptionAt(int32 index, const char** out_name, int32* out_value) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void RemoveOptionAt(int32 index) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 CountOptions() const = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_tAddOptionAt(const char* name, int32 value, int32 index) = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 SelectedOption(const char** name = 0, int32* value = 0) const = 0;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SelectOptionFor(int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SelectOptionFor(const char *name);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMessage* MakeValueMessage(int32 value);
				</task>
			</class>
			<class name="BOptionPopUp" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BOptionPopUp(BRect frame, const char* name, const char* label, BMessage* message, uint32 resize = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BOptionPopUp(BRect frame, const char* name, const char* label, BMessage* message, bool fixed, uint32 resize = B_FOLLOW_LEFT | B_FOLLOW_TOP, uint32 flags = B_WILL_DRAW);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					~BOptionPopUp();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuField* MenuField();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool GetOptionAt(int32 index, const char** out_name, int32* out_value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void RemoveOptionAt(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 CountOptions() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t AddOptionAt(const char* name, int32 value, int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLabel(const char* text);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetValue(int32 value);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual voidSetEnabled(bool on);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual int32 SelectedOption(const char** outName = 0, int32* outValue = 0) const;
				</task>
			</class>
		</section>
	</group>
	<group name="Integration">
		<section name="BArchivable">
			<class name="BArchivable" owner="Erik Jaesler">
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BArchivable();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BArchivable(BMessage* from);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					~BArchivable();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					virtual status_t Archive(BMessage* into, bool deep = true) const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					static BArchivable* Instantiate(BMessage* from);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					virtual status_t Perform(perform_code d, void* arg); ???
				</task>
			</class>
			<functions name="BArchivable" owner="Erik Jaesler">
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BArchivable* instantiate_object(BMessage* from, image_id* id);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BArchivable* instantiate_object(BMessage* from);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					bool validate_instantiation(BMessage* from, const char* class_name);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					instantiation_func find_instantiation_func(const char* class_name, const char* sig);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					instantiation_func find_instantiation_func(const char* class_name);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					instantiation_func find_instantiation_func(BMessage* archive_data);
				</task>
			</functions>
		</section>
		<section name="BApplication">
			<class name="BApplication" owner="Erik Jaesler">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BApplication(const char* signature);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BApplication(const char* signature, status_t* error);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BApplication(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BApplication();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t InitCheck() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual thread_id Run();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Quit();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool QuitRequested();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Pulse();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ReadyToRun();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ArgvReceived(int32 argc, char** argv);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AppActivated(bool active);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void RefsReceived(BMessage* a_message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AboutRequested();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ShowCursor();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void HideCursor();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ObscureCursor();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsCursorHidden() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetCursor(const void* cursor);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetCursor(const BCursor* cursor, bool sync=true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountWindows() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BWindow* WindowAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountLoopers() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BLooper* LooperAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsLaunching() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetAppInfo(app_info* info) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BResources* AppResources();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DispatchMessage(BMessage* an_event, BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetPulseRate(bigtime_t rate);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
			</class>
		</section>
		<section name="BWindow">
			<class name="BWindow" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BWindow(BRect frame, const char* title, window_type type, uint32 flags, uint32 workspace = B_CURRENT_WORKSPACE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BWindow(BRect frame, const char* title, window_look look, window_feel feel, uint32 flags, uint32 workspace = B_CURRENT_WORKSPACE);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BWindow(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Quit();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Close();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddChild(BView* child, BView* before = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveChild(BView* child);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountChildren() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* ChildAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DispatchMessage(BMessage* message, BHandler* handler);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WorkspacesChanged(uint32 old_ws, uint32 new_ws);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WorkspaceActivated(int32 ws, bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Minimize(bool minimize);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Zoom(BPoint rec_position, float rec_width, float rec_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Zoom();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetZoomLimits(float max_h, float max_v);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ScreenChanged(BRect screen_size, color_space depth);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetPulseRate(bigtime_t rate);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bigtime_t PulseRate() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddShortcut(uint32 key, uint32 modifiers, BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddShortcut(uint32 key, uint32 modifiers, BMessage* msg, BHandler* target);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void RemoveShortcut(uint32 key, uint32 modifiers);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetDefaultButton(BButton* button);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BButton* DefaultButton() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MenusBeginning();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MenusEnded();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool NeedsUpdate() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void UpdateIfNeeded();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* FindView(const char* view_name) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* FindView(BPoint) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* CurrentFocus() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Activate(bool = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertToScreen(BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint ConvertToScreen(BPoint pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertFromScreen(BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint ConvertFromScreen(BPoint pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertToScreen(BRect* rect) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect ConvertToScreen(BRect rect) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertFromScreen(BRect* rect) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect ConvertFromScreen(BRect rect) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MoveBy(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MoveTo(BPoint);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MoveTo(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ResizeBy(float dx, float dy);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ResizeTo(float width, float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Show();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Hide();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsHidden() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsMinimized() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Flush() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Sync() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SendBehind(const BWindow* window);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DisableUpdates();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void EnableUpdates();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void BeginViewTransaction();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void EndViewTransaction();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Bounds() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Frame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* Title() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetTitle(const char* title);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsFront() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsActive() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetKeyMenuBar(BMenuBar* bar);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMenuBar* KeyMenuBar() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetSizeLimits(float min_h, float max_h, float min_v, float max_v);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetSizeLimits(float* min_h, float* max_h, float* min_v, float* max_v);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 Workspaces() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetWorkspaces(uint32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* LastMouseMovedView() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t AddToSubset(BWindow* window);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t RemoveFromSubset(BWindow* window);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetType(window_type type);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					window_type Type() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetLook(window_look look);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					window_look Look() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetFeel(window_feel feel);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					window_feel Feel() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetFlags(uint32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 Flags() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsModal() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsFloating() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetWindowAlignment(window_alignment mode, int32 h, int32 hOffset = 0, int32 width = 0, int32 widthOffset = 0, int32 v = 0, int32 vOffset = 0, int32 height = 0, int32 heightOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t GetWindowAlignment(window_alignment* mode = NULL, int32* h = NULL, int32* hOffset = NULL, int32* width = NULL, int32* widthOffset = NULL, int32* v = NULL, int32* vOffset = NULL, int32* height = NULL, int32* heightOffset = NULL) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual bool QuitRequested();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual thread_id Run();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void task_looper();
				</task>
			</class>
		</section>
		<section name="BView">
			<class name="BView" owner="">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView(BRect frame, const char* name, uint32 resizeMask, uint32 flags);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BView();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					static BArchivable* Instantiate(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Archive(BMessage* data, bool deep = true) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AttachedToWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllAttached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DetachedFromWindow();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void AllDetached();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MessageReceived(BMessage* msg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddChild(BView* child, BView* before = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveChild(BView* child);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountChildren() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* ChildAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* NextSibling() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* PreviousSibling() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveSelf();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BWindow* Window() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Draw(BRect updateRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseDown(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseUp(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MouseMoved(BPoint where, uint32 code, const BMessage* a_message);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void WindowActivated(bool state);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyDown(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void KeyUp(const char* bytes, int32 numBytes);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Pulse();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameMoved(BPoint new_position);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void FrameResized(float new_width, float new_height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void TargetedByScrollView(BScrollView* scroll_view);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void BeginRectTracking(BRect startRect, uint32 style = B_TRACK_WHOLE_RECT);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void EndRectTracking();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetMouse(BPoint* location, uint32* buttons, bool checkMessageQueue = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DragMessage(BMessage* aMessage, BRect dragRect, BHandler* reply_to = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DragMessage(BMessage* aMessage, BBitmap* anImage, BPoint offset, BHandler* reply_to = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DragMessage(BMessage* aMessage, BBitmap* anImage, drawing_mode dragMode, BPoint offset, BHandler* reply_to = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* FindView(const char* name) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BView* Parent() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Bounds() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect Frame() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertToScreen(BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint ConvertToScreen(BPoint pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertFromScreen(BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint ConvertFromScreen(BPoint pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertToScreen(BRect* r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect ConvertToScreen(BRect r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertFromScreen(BRect* r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect ConvertFromScreen(BRect r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertToParent(BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint ConvertToParent(BPoint pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertFromParent(BPoint* pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint ConvertFromParent(BPoint pt) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertToParent(BRect* r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect ConvertToParent(BRect r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ConvertFromParent(BRect* r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BRect ConvertFromParent(BRect r) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint LeftTop() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetClippingRegion(BRegion* region) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ConstrainClippingRegion(BRegion* region);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ClipToPicture(BPicture* picture, BPoint where = B_ORIGIN, bool sync = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ClipToInversePicture(BPicture* picture, BPoint where = B_ORIGIN, bool sync = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetDrawingMode(drawing_mode mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					drawing_mode DrawingMode() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetBlendingMode(source_alpha srcAlpha, alpha_function alphaFunc);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetBlendingMode(source_alpha* srcAlpha, alpha_function* alphaFunc) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetPenSize(float size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float PenSize() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetViewCursor(const BCursor* cursor, bool sync=true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetViewColor(rgb_color c);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetViewColor(uchar r, uchar g, uchar b, uchar a = 255);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color ViewColor() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetViewBitmap(const BBitmap* bitmap, BRect srcRect, BRect dstRect, uint32 followFlags=B_FOLLOW_TOP|B_FOLLOW_LEFT, uint32 options = B_TILE_BITMAP);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetViewBitmap(const BBitmap* bitmap, uint32 followFlags = B_FOLLOW_TOP|B_FOLLOW_LEFT, uint32 options = B_TILE_BITMAP);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ClearViewBitmap();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetViewOverlay(const BBitmap* overlay, BRect srcRect, BRect dstRect, rgb_color* colorKey, uint32 followFlags = B_FOLLOW_TOP|B_FOLLOW_LEFT, uint32 options = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetViewOverlay(const BBitmap* overlay, rgb_color* colorKey, uint32 followFlags = B_FOLLOW_TOP|B_FOLLOW_LEFT, uint32 options = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ClearViewOverlay();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetHighColor(rgb_color a_color);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetHighColor(uchar r, uchar g, uchar b, uchar a = 255);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color HighColor() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetLowColor(rgb_color a_color);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetLowColor(uchar r, uchar g, uchar b, uchar a = 255);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					rgb_color LowColor() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetLineMode(cap_mode lineCap, join_mode lineJoin, float miterLimit = B_DEFAULT_MITER_LIMIT);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					join_mode LineJoinMode() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					cap_mode LineCapMode() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float LineMiterLimit() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetOrigin(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetOrigin(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint Origin() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void PushState();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void PopState();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MovePenTo(BPoint pt);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MovePenTo(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MovePenBy(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPoint PenLocation() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeLine(BPoint toPt, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeLine(BPoint pt0, BPoint pt1, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void BeginLineArray(int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AddLine(BPoint pt0, BPoint pt1, rgb_color col);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void EndLineArray();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokePolygon(const BPolygon* aPolygon, bool closed = true, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokePolygon(const BPoint* ptArray, int32 numPts, bool closed = true, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokePolygon(const BPoint* ptArray, int32 numPts, BRect bounds, bool closed = true, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillPolygon(const BPolygon* aPolygon, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillPolygon(const BPoint* ptArray, int32 numPts, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillPolygon(const BPoint* ptArray, int32 numPts, BRect bounds, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeTriangle(BPoint pt1, BPoint pt2, BPoint pt3, BRect bounds, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeTriangle(BPoint pt1, BPoint pt2, BPoint pt3, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillTriangle(BPoint pt1, BPoint pt2, BPoint pt3, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillTriangle(BPoint pt1, BPoint pt2, BPoint pt3, BRect bounds,pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeRect(BRect r, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillRect(BRect r, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillRegion(BRegion* a_region, pattern p= B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void InvertRect(BRect r);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeRoundRect(BRect r, float xRadius, float yRadius, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillRoundRect(BRect r, float xRadius, float yRadius, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeEllipse(BPoint center, float xRadius, float yRadius, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeEllipse(BRect r, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillEllipse(BPoint center, float xRadius, float yRadius, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillEllipse(BRect r, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeArc(BPoint center, float xRadius, float yRadius, float start_angle, float arc_angle, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeArc(BRect r, float start_angle, float arc_angle, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillArc(BPoint center, float xRadius, float yRadius, float start_angle, float arc_angle, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillArc(BRect r, float start_angle, float arc_angle, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeBezier(BPoint* controlPoints, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillBezier( BPoint* controlPoints, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void StrokeShape(BShape* shape, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void FillShape(BShape* shape, pattern p = B_SOLID_HIGH);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void CopyBits(BRect src, BRect dst);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmapAsync(const BBitmap* aBitmap, BRect srcRect, BRect dstRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmapAsync(const BBitmap* aBitmap);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmapAsync(const BBitmap* aBitmap, BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmapAsync(const BBitmap* aBitmap, BRect dstRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmap(const BBitmap* aBitmap, BRect srcRect, BRect dstRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmap(const BBitmap* aBitmap);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmap(const BBitmap* aBitmap, BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawBitmap(const BBitmap* aBitmap, BRect dstRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawChar(char aChar);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawChar(char aChar, BPoint location);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawString(const char* aString, escapement_delta* delta = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawString(const char* aString, BPoint location, escapement_delta* delta = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawString(const char* aString, int32 length, escapement_delta* delta = NULL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawString(const char* aString, int32 length, BPoint location, escapement_delta* delta = 0L);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFont(const BFont* font, uint32 mask = B_FONT_ALL);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetFont(BFont* font) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void TruncateString(BString* in_out, uint32 mode, float width) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float StringWidth(const char* string) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					float StringWidth(const char* string, int32 length) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetStringWidths(char* stringArray[], int32 lengthArray[], int32 numStrings, float widthArray[]) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetFontSize(float size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ForceFontAliasing(bool enable);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void GetFontHeight(font_height* height) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Invalidate(BRect invalRect);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Invalidate(const BRegion* invalRegion);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Invalidate();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetDiskMode(char* filename, long offset);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void BeginPicture(BPicture* a_picture);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void AppendToPicture(BPicture* a_picture);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPicture* EndPicture();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawPicture(const BPicture* a_picture);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawPicture(const BPicture* a_picture, BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawPicture(const char* filename, long offset, BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawPictureAsync(const BPicture* a_picture);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawPictureAsync(const BPicture* a_picture, BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DrawPictureAsync(const char* filename, long offset, BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetEventMask(uint32 mask, uint32 options=0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 EventMask();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					status_t SetMouseEventMask(uint32 mask, uint32 options=0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetFlags(uint32 flags);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 Flags() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void SetResizingMode(uint32 mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					uint32 ResizingMode() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MoveBy(float dh, float dv);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MoveTo(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MoveTo(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ResizeBy(float dh, float dv);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ResizeTo(float width, float height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ScrollBy(float dh, float dv);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void ScrollTo(float x, float y);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ScrollTo(BPoint where);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void MakeFocus(bool focusState = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsFocus() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Show();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void Hide();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsHidden() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsHidden(const BView* looking_from) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Flush() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Sync() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void GetPreferredSize(float* width, float* height);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void ResizeToPreferred();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BScrollBar* ScrollBar(orientation posture) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual BHandler* ResolveSpecifier(BMessage* msg, int32 index, BMessage* specifier, int32 form, const char* property);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t GetSupportedSuites(BMessage* data);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsPrinting() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetScale(float scale) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t Perform(perform_code d, void* arg);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual void DrawAfterChildren(BRect r);
				</task>
			</class>
		</section>
	</group>
	<group name="Support Kit">
		<section name="IO">
			<class name="BDataIO" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BDataIO
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BDataIO();
				</task>
			</class>
			<class name="BMallocIO" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMallocIO();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMallocIO();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ssize_t ReadAt(off_t pos, void *buffer, size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ssize_t WriteAt(off_t pos, const void *buffer, size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual off_t Seek(off_t pos, uint32 seek_mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual off_t Position() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetSize(off_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SetBlockSize(size_t blocksize);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const void* Buffer() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					size_t BufferLength() const;
				</task>
			</class>
			<class name="BMemoryIO" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMemoryIO(void *p, size_t len);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BMemoryIO(const void *p, size_t len);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BMemoryIO();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ssize_t ReadAt(off_t pos, void *buffer, size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ssize_t WriteAt(off_t pos, const void *buffer, size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual off_t Seek(off_t pos, uint32 seek_mode);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual off_t Position() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetSize(off_t size);
				</task>
			</class>
			<class name="BPositionIO" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BPositionIO();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BPositionIO();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ssize_t Read(void *buffer, size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ssize_t Write(const void *buffer, size_t size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual status_t SetSize(off_t size);
				</task>
			</class>
		</section>
		<section name="Utilities">
			<functions name="Misc" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					convert_from_utf8
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					convert_to_utf8
				</task>
			</functions>
			<functions name="BString Utility" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&lt(const char *, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&lt=(const char *, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator==(const char *, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&gt(const char *, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&gt=(const char *, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator!=(const char *, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int Compare(const BString &, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int ICompare(const BString &, const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int Compare(const BString *, const BString *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int ICompare(const BString *, const BString *);
				</task>
			</functions>
			<class name="BList" owner="Issac Yonemoto">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BList(int32 itemsPerBlock = 20);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BList(const BList&);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BList();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BList& operator=(const BList &from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(void *item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddItem(void *item, int32 atIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddList(BList *newItems);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool AddList(BList *newItems, int32 atIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveItem(void *item);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* RemoveItem(int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool RemoveItems(int32 index, int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool ReplaceItem(int32 index, void *newItem);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MakeEmpty();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void SortItems(int (*cmp)(const void *, const void *));
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool SwapItems(int32 indexA, int32 indexB);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool MoveItem(int32 fromIndex, int32 toIndex);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* ItemAt(int32) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* ItemAtFast(int32) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* FirstItem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* LastItem() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* Items() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool HasItem(void *item) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IndexOf(void *item) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountItems() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool IsEmpty() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DoForEach(bool (*func)(void *));
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void DoForEach(bool (*func)(void *, void *), void *);
				</task>
			</class>
			<class name="BString" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString(const char *, int32 maxLength);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					~BString();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					const char* String() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 Length() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 CountChars() const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator=(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator=(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator=(char);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& SetTo(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& SetTo(const char *, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& SetTo(const BString &from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Adopt(BString &from);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& SetTo(const BString &, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Adopt(BString &from, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& SetTo(char, int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& CopyInto(BString &into, int32 fromOffset, int32 length) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void CopyInto(char *into, int32 fromOffset, int32 length) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator+=(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator+=(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator+=(char);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Append(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Append(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Append(const BString &, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Append(const char *, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Append(char, int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Prepend(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Prepend(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Prepend(const char *, int32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Prepend(const BString &, int32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Prepend(char, int32 count);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Insert(const char *, int32 pos);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Insert(const char *, int32 length, int32 pos);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Insert(const char *, int32 fromOffset, int32 length, int32 pos);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Insert(const BString &, int32 pos);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Insert(const BString &, int32 length, int32 pos);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Insert(const BString &, int32 fromOffset, int32 length, int32 pos);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Insert(char, int32 count, int32 pos);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Truncate(int32 newLength, bool lazy = true);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Remove(int32 from, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& RemoveFirst(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& RemoveLast(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& RemoveAll(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& RemoveFirst(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& RemoveLast(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& RemoveAll(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& RemoveSet(const char *setOfCharsToRemove);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& MoveInto(BString &into, int32 from, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void MoveInto(char *into, int32 from, int32 length);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&lt(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&lt=(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator==(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&gt=(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&gt(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator!=(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&lt(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&lt=(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator==(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&gt=(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator&gt(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					bool operator!=(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int Compare(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int Compare(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int Compare(const BString &, int32 n) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int Compare(const char *, int32 n) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int ICompare(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int ICompare(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int ICompare(const BString &, int32 n) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int ICompare(const char *, int32 n) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindFirst(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindFirst(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindFirst(const BString &, int32 fromOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindFirst(const char *, int32 fromOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindFirst(char) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindFirst(char, int32 fromOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindLast(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindLast(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindLast(const BString &, int32 beforeOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindLast(const char *, int32 beforeOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindLast(char) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 FindLast(char, int32 fromOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindFirst(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindFirst(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindFirst(const BString &, int32 fromOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindFirst(const char *, int32 fromOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindLast(const BString &) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindLast(const char *) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindLast(const BString &, int32 beforeOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					int32 IFindLast(const char *, int32 beforeOffset) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceFirst(char replaceThis, char withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceLast(char replaceThis, char withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceAll(char replaceThis, char withThis, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Replace(char replaceThis, char withThis, int32 maxReplaceCount, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceFirst(const char *replaceThis, const char *withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceLast(const char *replaceThis, const char *withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceAll(const char *replaceThis, const char *withThis, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Replace(const char *replaceThis, const char *withThis, int32 maxReplaceCount, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplaceFirst(char replaceThis, char withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplaceLast(char replaceThis, char withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplaceAll(char replaceThis, char withThis, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplace(char replaceThis, char withThis, int32 maxReplaceCount, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplaceFirst(const char *replaceThis, const char *withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplaceLast(const char *replaceThis, const char *withThis);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplaceAll(const char *replaceThis, const char *withThis, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& IReplace(const char *replaceThis, const char *withThis, int32 maxReplaceCount, int32 fromOffset = 0);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceSet(const char *setOfChars, char with);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ReplaceSet(const char *setOfChars, const char *with);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					char operator[](int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					char& operator[](int32 index);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					char ByteAt(int32 index) const;
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					char* LockBuffer(int32 maxLength);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& UnlockBuffer(int32 length = -1);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ToLower();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& ToUpper();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& Capitalize();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& CapitalizeEachWord();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& CharacterEscape(const char* original, const char* setOfCharsToEscape, char escapeWith);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& CharacterEscape(const char *setOfCharsToEscape, char escapeWith);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& CharacterDeescape(const char *original, char escapeChar);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& CharacterDeescape(char escapeChar);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(const char *);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(const BString &);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(char);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(int);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(unsigned int);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(uint32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(int32);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(uint64);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(int64);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BString& operator&lt&lt(float);
				</task>
			</class>
			<class name="BBlockCache" owner="Graham Gilmore">
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					BBlockCache(size_t cache_size, size_t block_size, uint32 type);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					virtual ~BBlockCache();
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void* Get(size_t block_size);
				</task>
				<task cases="false" fspec="false" impl="false" tests="false" tspec="false">
					void Save(void *pointer, size_t block_size);
				</task>
			</class>
			<class name="BStopWatch" owner="Steve Vallee">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BStopWatch(const char *name, bool silent = false);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					virtual ~BStopWatch();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void Suspend();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void Resume();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bigtime_t Lap();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bigtime_t ElapsedTime() const;
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					void Reset();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					const char* Name() const;
				</task>
			</class>
		</section>
		<section name="Synchronization">
			<class name="BAutoLock" owner="Jeremy Rand">
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BAutolock(BLocker *lock);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BAutolock(BLocker &lock);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					BAutolock(BLooper *looper);
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					~BAutolock();
				</task>
				<task cases="false" fspec="false" impl="true" tests="false" tspec="false">
					bool IsLocked();
				</task>
			</class>
			<class name="BLocker" owner="Jeremy Rand">
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BLocker();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BLocker(const char *name);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BLocker(bool benaphore_style);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BLocker(const char *name, bool benaphore_style);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					BLocker(const char *name, bool benaphore_style, bool);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					virtual ~BLocker();
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					bool Lock(void);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					status_t LockWithTimeout(bigtime_t timeout);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					void Unlock(void);
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					thread_id LockingThread(void) const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					bool IsLocked(void) const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					int32 CountLocks(void) const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					int32 CountLockRequests(void) const;
				</task>
				<task cases="true" fspec="true" impl="true" tests="true" tspec="true">
					sem_id Sem(void) const;
				</task>
			</class>
		</section>
	</group>
</TaskXML>
